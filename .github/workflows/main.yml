name: build and deploy microservices

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: [self-hosted, linux, gram8]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: 'Guru8amal/project_work-Industry-Grade-Project-2'
          ref: 'main'
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Build and Push Docker Image and Deploy
        run: |
          import subprocess

          def run_command(command):
              try:
                  output = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True, universal_newlines=True)
                  print(output)
              except subprocess.CalledProcessError as e:
                  print("ERROR:", e.output)

          def build_image(image_name, dockerfile_path='.'):
              print("Building Docker image...")
              run_command(f'sudo docker build -t {image_name} {dockerfile_path}')

          def check_local_registry(port=5000):
              print("Checking for local Docker registry...")
              try:
                  subprocess.check_output(f'sudo docker inspect registry:{port}', shell=True)
                  print(f"Registry already running on port {port}")
              except subprocess.CalledProcessError:
                  print(f"No registry found on port {port}. Starting one...")
                  run_command(f'sudo docker run -d -p {port}:{port} --name registry registry:2')

          def push_image(image_name, registry_port=5000):
              local_registry_tag = f'localhost:{registry_port}/{image_name}'
              print("Tagging and pushing to local registry...")
              run_command(f'sudo docker tag {image_name} {local_registry_tag}')
              run_command(f'sudo docker push {local_registry_tag}')

          app_name = 'project2-website'
          image_name = 'project2-webapp-image'
          build_image(image_name)
          check_local_registry()
          push_image(image_name)

        shell: python
